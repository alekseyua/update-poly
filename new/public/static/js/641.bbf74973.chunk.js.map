{"version":3,"sources":["webpack://client/./src/Views/ProductDetailsViews/ControlButtons/style/controlbuttons.module.scss","webpack://client/./src/Views/ProductDetailsViews/ControlButtons/ControlButtons.js","webpack://client/./src/Views/ProductDetailsViews/ControlButtons/ControlButtonsContainer.js"],"names":["module","exports","stateInStockeBtn","colorBtnClick","in_cart_count","is_collection","countInBtn","cloneCart","productId","modalView","role","url","linkToProductPage","addToCartProduct","className","style","Button","disabled","onClick","e","classNames","Icon","slot","src","shoppingIcon","width","height","ROLE","pointerEvents","Text","text","in_stock_count","is_in_stock","dispatch","useStoreon","setCountInBtn","useState","setStateInStockeBtn","navigate","useNavigate","changeColorBtn","setChangeColorBtn","red","green","useEffect","closeModal","show","setColorBtnClick","styleColor","href","full","variant","count","redirectTo","path","timerTimeout","setTimeout","clearTimeout","cartIcon","target","children","offsetParent","firstChild","cloneIcon","cloneNode","cloneBackgroundImage","backgroundImage","cloneIconWidth","offsetWidth","cloneIconHeight","offsetHeight","cloneIconTop","getBoundingClientRect","top","cloneIconLeft","left","classList","add","cssText","document","body","append","getCartId","querySelector","getCartIdTop","getCartIdLeft","console","log","timer","remove"],"mappings":"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","file":"static/js/641.bbf74973.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"prodpage-control-buttons__container\":\"controlbuttons-module__prodpage-control-buttons__container___jAEUr\",\"prodpage-control-buttons__add-to-cart-container\":\"controlbuttons-module__prodpage-control-buttons__add-to-cart-container___UXZsW\",\"prodpage-control-buttons__add-to-cart-container--fierst\":\"controlbuttons-module__prodpage-control-buttons__add-to-cart-container--fierst___7A1sp\",\"prodpage-control-buttons__descrement-button\":\"controlbuttons-module__prodpage-control-buttons__descrement-button___GetSn\",\"prodpage-control-buttons__increment-button\":\"controlbuttons-module__prodpage-control-buttons__increment-button___bb58O\",\"prodpage-control-buttons__info-in-cart\":\"controlbuttons-module__prodpage-control-buttons__info-in-cart___VtWNi\",\"prodpage-control-buttons__fierst-add-to-cart\":\"controlbuttons-module__prodpage-control-buttons__fierst-add-to-cart___3-RRI\",\"prodpage-control-buttons__inner-button\":\"controlbuttons-module__prodpage-control-buttons__inner-button___-FKNg\",\"prodpage-control-buttons__text-button\":\"controlbuttons-module__prodpage-control-buttons__text-button___mTXmU\",\"prodpage-control-buttons__indicator\":\"controlbuttons-module__prodpage-control-buttons__indicator___KuetK\",\"prodpage-control-buttons__indicator--color__red\":\"controlbuttons-module__prodpage-control-buttons__indicator--color__red___7PQNg\",\"slidertimer\":\"controlbuttons-module__slidertimer___-0asc\"};","import React from 'react';\nimport classNames from 'classnames';\nimport { ROLE } from '../../../const';\nimport { shoppingIcon } from '../../../images';\nimport Button from '../../Button';\nimport Icon from '../../Icon';\nimport Text from '../../../helpers/Text';\n\nimport style from './style/controlbuttons.module.scss';\n\nconst ControlButtons = ({\n    stateInStockeBtn,\n    colorBtnClick,\n    in_cart_count,\n    is_collection,\n    countInBtn,\n    cloneCart,\n    productId,\n    modalView,\n    role,\n    url,\n    \n    linkToProductPage,\n    addToCartProduct,\n\n}) => {\n   \n    if (!!in_cart_count) {\n        return (\n            <div className={style['prodpage-control-buttons__container']}>\n                <div className={style['prodpage-control-buttons__add-to-cart-container']}>\n                    <Button\n                        disabled={in_cart_count > 1 ? false : in_cart_count === 1 ? true : stateInStockeBtn}\n                        onClick={(e) => {\n                            cloneCart(e)\n                            addToCartProduct( -1, modalView, productId );\n                        }}\n                        className={style['prodpage-control-buttons__descrement-button']}\n                    >\n                        -\n                    </Button>\n                    <p className={classNames({\n                        [style['prodpage-control-buttons__inner-button']]:true,\n                        [style[colorBtnClick]]: !!colorBtnClick\n                    })}>\n                        <Icon\n                            slot=\"icon-left\"\n                            src={shoppingIcon}\n                            width={25}\n                            height={25}\n                        />\n                        <span\n                            className={style['prodpage-control-buttons__info-in-cart']}\n                        > в корзине: {in_cart_count} {is_collection && role === ROLE.WHOLESALE ? 'ряд(а)' : 'шт.'}</span>\n                    </p>\n                    <Button\n                        disabled={stateInStockeBtn}\n                        onClick={(e) => {\n                            cloneCart(e)\n                            addToCartProduct( 1, modalView, productId );\n                        }}\n                        className={style['prodpage-control-buttons__increment-button']}\n                    >\n                        +\n                    </Button>\n                </div>\n                {linkToProductPage(url, modalView)}\n            </div>\n        );\n    } else {\n        return (\n            <div className={style['prodpage-control-buttons__container']}>\n                <div className={style['prodpage-control-buttons__add-to-cart-container--fierst']}>\n                    <Button\n                        disabled={stateInStockeBtn}\n                        onClick={(e) => {\n                            cloneCart(e)\n                            addToCartProduct( 1, modalView, productId );\n                        }}\n                        className={style['prodpage-control-buttons__fierst-add-to-cart']}\n                    >\n                        <Icon\n                            slot=\"icon-left\"\n                            src={shoppingIcon}\n                            pointerEvents={'none'}\n                            width={25}\n                            height={25}\n                        />\n                        <div\n                            className={style['prodpage-control-buttons__text-button']}\n                        >\n                            { Text({text: 'add-to-cart'}) }\n                        </div>\n                    </Button>\n                </div>\n                {linkToProductPage(url, modalView)}\n            </div>\n        )\n    }\n}\n\nexport default ControlButtons;","import React, { useState, useEffect } from 'react';\nimport Button from '../../Button';\nimport ControlButtons from './ControlButtons';\nimport classNames from 'classnames';\n\nimport style from './style/controlbuttons.module.scss';\nimport { useStoreon } from 'storeon/react';\nimport { useNavigate } from 'react-router-dom';\n\n/**\n * \n * @param {\n * 1) при добавлении товара цвет кнопки кратковременно меняет цвет на зелёный\n * 2) иконка с кнопки клонируется и перемещаеться к хэдер меню и там меняеться численость\n * 3) \n * } param0 \n * @returns \n */\n\nconst ControlButtonsContainer = ({\n    in_stock_count,\n    is_collection,\n    in_cart_count,\n    is_in_stock,\n    productId,\n    modalView,\n    role,\n    url,\n\n}) =>{\n    const { dispatch } = useStoreon();\n    const [ countInBtn, setCountInBtn ] = useState(in_cart_count);\n    const [ stateInStockeBtn, setStateInStockeBtn ] = useState(false);\n    const navigate = useNavigate();\n    const [ changeColorBtn, setChangeColorBtn ] = useState({\n        red: false,\n        green: false\n    })\n\n    useEffect(()=>{ \n      if(is_in_stock){\n        if(in_stock_count < 1){\n          setStateInStockeBtn(true)\n        } else {\n          setStateInStockeBtn(false)\n        }\n        if (in_stock_count > in_cart_count){\n          setStateInStockeBtn(false)\n        }else{\n          setStateInStockeBtn(true)\n        }\n      }else{\n        setStateInStockeBtn(false)\n      }\n    },[is_in_stock,in_stock_count,in_cart_count])\n\n    const closeModal = () => {\n      dispatch('setModalState',{show: false})\n    }\n\n    const cloneCart = (e) =>{\n        let cartIcon\n        if(e.target.children[0]){\n          cartIcon = e.target.children[0]\n        }else{\n          cartIcon = e.target.offsetParent.children[0].children[1].firstChild\n        }\n        // console.log({e: e.target.offsetParent.children[0].children[1].firstChild})\n        const cloneIcon = cartIcon.cloneNode(true)\n        const cloneBackgroundImage = cartIcon.style.backgroundImage;\n        const cloneIconWidth = cartIcon.offsetWidth;//ширина изображения\n        const cloneIconHeight = cartIcon.offsetHeight;// высота изображения\n        const cloneIconTop = cartIcon.getBoundingClientRect().top;// позиция изображения на странице от верха\n        const cloneIconLeft = cartIcon.getBoundingClientRect().left;//позиция изображения на странице от левого края\n        \n        //присваиваем стили нашей картинке\n        // cloneIcon.setAttribute('class', '_flyImage');\n        cloneIcon.classList.add('_flyImage')\n      cloneIcon.style.cssText = `\n        left: ${cloneIconLeft}px;\n        top:  ${cloneIconTop}px;\n        width: ${cloneIconWidth}px;\n        height: ${cloneIconHeight}px;\n      `\n      //добавляем клон на страницу\n      document.body.append(cloneIcon)\n      // получаем координаты карзины по id 'cart-id'\n      const getCartId = document.querySelector('#cart-id')\n      const getCartIdTop = getCartId.getBoundingClientRect().top;// позиция изображения на странице от верха\n      const getCartIdLeft = getCartId.getBoundingClientRect().left;// позиция изображения на странице от левого края\n      \n      console.log('data button = ',\n          {cloneIcon},\n          {getCartId}\n      )\n      cloneIcon.style.cssText = `\n        left: ${getCartIdLeft}px;\n        top:  ${getCartIdTop}px;\n        background-image: ${cloneBackgroundImage};\n        width: 0px;\n        height: 0px;\n        opacity: 0;\n        transform: scale(.5)\n      `\n      const timer = setTimeout(() => {\n        cloneIcon.remove()\n        return () => clearTimeout(timer)\n      }, 4000)\n    }\n  \n    //******************************************************************************************************* */\n    const addToCartProduct = (count, modalView, productId) => {\n      const redirectTo = path => {\n        const timerTimeout = setTimeout(()=>{\n          navigate(path);\n          return () => clearTimeout(timerTimeout);          \n        },100)\n      }\n      const params = {\n        productId,\n        count,\n        modalView,\n        redirectTo,\n      }\n      dispatch('addToCart', params);      \n    };\n  \n    useEffect(()=>{\n      in_cart_count !== countInBtn ? setCountInBtn(in_cart_count) : null\n    },[in_cart_count])\n  \n    //*******************меняем стиль на кнопке зелёный или красный*** проверено работает***************************************** */\n    const [colorBtnClick, setColorBtnClick] = useState('prodpage-control-buttons__indicator');\n    useEffect(() => {\n      let styleColor = (classNames({\n        [style['prodpage-control-buttons__indicator--color__red']]: changeColorBtn.red,\n        [style['prodpage-control-buttons__indicator--color__green']]: changeColorBtn.green,\n      })\n      )\n      setColorBtnClick(styleColor)\n    }, [changeColorBtn.red, changeColorBtn.green])\n  \n    //******************************************************************************************************* */\n    const linkToProductPage = (url, modalView) => {\n      if (!modalView) return null;\n      return (\n        <Button href={`/${url}`} full variant={'catalog-link-transparent__modal'} onClick = {closeModal}>\n          перейти на страницу товара\n        </Button>\n      );\n    };\n\n\n    return (\n        <ControlButtons\n          linkToProductPage = { linkToProductPage }\n          stateInStockeBtn = { stateInStockeBtn }\n          addToCartProduct = { addToCartProduct }\n          in_cart_count = { in_cart_count }\n          colorBtnClick = { colorBtnClick }\n          is_collection = { is_collection }\n          countInBtn = { countInBtn }\n          modalView = { modalView } \n          productId = { productId }\n          cloneCart = { cloneCart }\n          role = { role }\n          url = { url }\n        />\n    )\n}\n\nexport default ControlButtonsContainer;"],"sourceRoot":""}