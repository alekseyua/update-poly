{"version":3,"sources":["webpack://client/./src/Pages/CatalogPage/CatalogPageLayout/CatalogFilters/BrandsFilters.js"],"names":["BrandsFilters","brands","values","openBtnSubmit","setValues","role","number","name","sercheValue","setSercheValue","useState","brandsRender","setBrandsRender","sertificate","setSertificate","useEffect","resetFilter","e","preventDefault","sercheHandler","value","target","newBrandsRender","filter","el","title","toUpperCase","search","updateRenderProiduct","is_visibleViewAll","length","map","id","checked","includes","key","v4","data-cy","onChange","tagName","Array","isArray","newValue","handlerChangeFilter","variant","label","React"],"mappings":"0MAMA,MAAMA,EAAgB,EACpBC,SAAS,GACTC,SAAS,CAAED,OAAQ,IACnBE,iBAAgB,EAChBC,YAAY,SACZC,OAAO,CAAEC,OAAQ,OAEjB,MAAMC,EAAO,UAEP,EAACC,EAAD,EAAcC,IAAkBC,cAAS,KACzC,EAACC,EAAD,EAAeC,IAAmBF,cAAS,KAC3C,EAACG,EAAD,EAAcC,IAAkBJ,eAAS,IAuB/CK,eAAU,KACRH,EAAgBX,IACf,CAACA,IAgBJ,OAEE,EAAC,WAAD,KACE,EAAC,kBAAD,CACEa,eAAgBA,EAChBD,YAAaA,EACbG,YA9BeC,IACnBA,EAAEC,iBACFd,GAAU,kBAAKF,GAAN,IAAc,CAACK,GAAO,MAC/BE,EAAe,KA4BXU,cAnCiBF,IAXOA,KAC5B,MAAMG,EAAQH,EAAEI,OAAOD,MACvB,GAAc,KAAVA,EAEF,OADAX,EAAeW,GACRR,EAAgBX,GAEzB,MAAMqB,EAAkBrB,EAAOsB,OAAOC,IAA8D,IAAxDA,EAAGC,MAAMC,cAAcC,OAAOP,EAAMM,gBAChFd,EAAgBU,GAChBb,EAAeW,IAIfQ,CAAqBX,IAmCjBT,YAAaA,EACbH,KAAMA,EACNwB,kBAAmBlB,EAAamB,QAE/BnB,EAAaoB,IAAKP,IACjB,MAAMQ,EAAKR,EAAGQ,GACRC,EAAU/B,EAAOD,OAAOiC,SAASF,GACvC,OACE,EAAC,uBAAD,CAAiCG,IAAKH,GACpC,EAAC,IAAD,CACEC,QAASA,EACT1B,KAAMA,EAEN4B,KAAKC,SACLC,UAAU,gBAAeb,EAAGQ,GAC5BM,SAAWrB,GArCG,EAACA,EAAGe,KAC9B,GAAkB,SAAdf,EAAEsB,QAAoB,OAC1B,MAAMnB,IAAUH,EAAEgB,QAIlB,GAHKO,MAAMC,QAAQvC,EAAOD,UACxBC,EAAOD,OAAS,IAAIC,EAAOD,SAEzBmB,EAAO,CACT,MAAMsB,EAAWxC,EAAOD,OAAOsB,OAAQC,GAAOA,IAAOQ,GACrD5B,GAAU,kBAAKF,GAAN,IAAc,CAACK,GAAOmC,UAE/BtC,GAAU,kBAAKF,GAAN,IAAc,CAACK,GAAO,IAAIL,EAAOD,OAAQ+B,MAEpD7B,KAyB6BwC,CAAoB1B,EAAGe,GACxCY,QAAQ,QACRC,MAAOrB,EAAGC,cAU1B,EAAeqB,OAAW9C","file":"static/js/272.7e4de9a1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CheckBox from '../../../../Views/CheckBox';\nimport CatalogViews from '../../../../Views/CatalogViews';\nimport { v4 } from 'uuid'\n// const apiContent = api.contentApi;\n\nconst BrandsFilters = ({\n  brands = [],\n  values = { brands: [] },\n  openBtnSubmit = false,\n  setValues = () => { },\n  role = { number: 2 },\n}) => {\n  const name = 'brands';\n\n  const [sercheValue, setSercheValue] = useState('');\n  const [brandsRender, setBrandsRender] = useState([]);\n  const [sertificate, setSertificate] = useState(false);\n\n  const updateRenderProiduct = (e) => {\n    const value = e.target.value;\n    if (value === '') {\n      setSercheValue(value);\n      return setBrandsRender(brands);\n    };\n    const newBrandsRender = brands.filter(el => el.title.toUpperCase().search(value.toUpperCase()) !== -1);\n    setBrandsRender(newBrandsRender);\n    setSercheValue(value);\n  };\n\n  const sercheHandler = (e) => {\n    updateRenderProiduct(e);\n  };\n\n  const resetFilter = (e) => {\n    e.preventDefault();\n    setValues({ ...values, [name]: [] });\n    setSercheValue('');\n  };\n\n  useEffect(() => {\n    setBrandsRender(brands);\n  }, [brands]);\n\n  const handlerChangeFilter = (e, id) => {\n    if (e.tagName === 'SPAN') return;\n    const value = !!e.checked;\n    if (!Array.isArray(values.brands)) {\n      values.brands = [...values.brands];\n    }\n    if (value) {\n      const newValue = values.brands.filter((el) => el !== id);\n      setValues({ ...values, [name]: newValue });\n    } else {\n      setValues({ ...values, [name]: [...values.brands, id] });\n    }\n    openBtnSubmit();\n  }\n  return (\n\n    <React.Fragment>\n      <CatalogViews.BrandsFilters\n        setSertificate={setSertificate}\n        sertificate={sertificate}\n        resetFilter={resetFilter}\n        sercheHandler={sercheHandler}\n        sercheValue={sercheValue}\n        role={role}\n        is_visibleViewAll={brandsRender.length}\n      >\n        {brandsRender.map((el) => {\n          const id = el.id;\n          const checked = values.brands.includes(id);\n          return (\n            <CatalogViews.LayoutCheckBoxItem key={id}>\n              <CheckBox\n                checked={checked}\n                name={name}\n                // id={id}\n                key={v4()}\n                data-cy={`brandFilters-${el.id}`}\n                onChange={(e) => handlerChangeFilter(e, id)}\n                variant=\"light\"\n                label={el.title}\n              ></CheckBox>\n            </CatalogViews.LayoutCheckBoxItem>\n          );\n        })}\n      </CatalogViews.BrandsFilters>\n    </React.Fragment>\n  );\n};\n\nexport default React.memo(BrandsFilters);\n"],"sourceRoot":""}