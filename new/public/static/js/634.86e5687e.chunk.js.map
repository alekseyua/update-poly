{"version":3,"sources":["webpack://client/./src/Pages/CatalogPage/CatalogPageLayout/CatalogFilters/ColorsFilters.js"],"names":["ColorsFilters","colors","values","setValues","openBtnSubmit","name","resetFilter","e","preventDefault","map","el","i","id","checked","includes","key","v4","data-cy","onChange","value","Array","isArray","newValue","filter","handlerChangeFilter","colorField","color","variant","label","title","React"],"mappings":"0MAKA,MAAMA,EAAgB,EACpBC,SAAS,GACTC,SAAS,CAAED,OAAQ,IACnBE,YAAY,SACZC,gBAAgB,aAEhB,MAAMC,EAAO,SAsBb,OACE,EAAC,kBAAD,CACEC,YAtBiBC,IACnBA,EAAEC,iBACFL,GAAU,kBAAKD,GAAN,IAAc,CAACG,GAAO,QAuB3BJ,EAAOQ,IAAI,CAACC,EAAIC,KACd,MAAMC,EAAKF,EAAGE,GACRC,EAAUX,EAAOD,OAAOa,SAASF,GACvC,OACE,EAAC,uBAAD,CAAiCG,IAAKH,GACpC,EAAC,IAAD,CACEG,KAAKC,SACLH,QAASA,EACTR,KAAMA,EAENY,UAAU,gBAAeP,EAAGE,GAC5BM,SAAWX,GA/BG,EAACA,EAAGK,KAC9B,MAAMO,EAAQZ,EAAEM,QAChB,GAAc,OAAVM,EAAJ,CACA,GAAIA,EAAO,CACJC,MAAMC,QAAQnB,EAAOD,UACxBC,EAAOD,OAAS,CAACC,EAAOD,SAE1B,MAAMqB,EAAWpB,EAAOD,OAAOsB,OAAQb,GAAOA,IAAOE,GACrDT,GAAU,kBAAKD,GAAN,IAAc,CAACG,GAAOiB,UAE/BnB,GAAU,kBAAKD,GAAN,IAAc,CAACG,GAAO,IAAIH,EAAOD,OAAQW,MAEpDR,MAmB6BoB,CAAoBjB,EAAGK,GACxCa,WAAYf,EAAGgB,MACfC,QAAQ,QACRC,MAAOlB,EAAGmB,aAU1B,EAAeC,OAAW9B","file":"static/js/634.86e5687e.chunk.js","sourcesContent":["import React from 'react';\nimport CheckBox from '../../../../Views/CheckBox';\nimport CatalogViews from '../../../../Views/CatalogViews';\nimport { v4 } from 'uuid';\n\nconst ColorsFilters = ({\n  colors = [],\n  values = { colors: [] },\n  setValues = () => { },\n  openBtnSubmit = () => { },\n}) => {\n  const name = 'colors';\n\n  const resetFilter = (e) => {\n    e.preventDefault();\n    setValues({ ...values, [name]: [] });\n  }\n\n  const handlerChangeFilter = (e, id) => {\n    const value = e.checked;\n    if (value === null) return;\n    if (value) {\n      if (!Array.isArray(values.colors)) {\n        values.colors = [values.colors];\n      }\n      const newValue = values.colors.filter((el) => el !== id);\n      setValues({ ...values, [name]: newValue });\n    } else {\n      setValues({ ...values, [name]: [...values.colors, id] });\n    }\n    openBtnSubmit();\n  }\n\n  return (\n    <CatalogViews.ColorsFilters\n      resetFilter={resetFilter}\n    >\n      {\n        colors.map((el, i) => {\n          const id = el.id;\n          const checked = values.colors.includes(id)\n          return (\n            <CatalogViews.LayoutCheckBoxItem key={id}>\n              <CheckBox\n                key={v4()}\n                checked={checked}\n                name={name}\n                // id={id}\n                data-cy={`colorFilters-${el.id}`}\n                onChange={(e) => handlerChangeFilter(e, id)}\n                colorField={el.color}\n                variant=\"light\"\n                label={el.title}\n              ></CheckBox>\n            </CatalogViews.LayoutCheckBoxItem>\n          );\n        })\n      }\n    </CatalogViews.ColorsFilters>\n  );\n};\n\nexport default React.memo(ColorsFilters);\n"],"sourceRoot":""}