{"version":3,"sources":["webpack://client/./src/Pages/OrderingPage/OrderingPageLayout/OrderingAddressBlock/OrderingAddress.js","webpack://client/./src/Pages/OrderingPage/OrderingPageLayout/OrderingAddressBlock/OrderingAddressContainer.js"],"names":["OrderingAddress","addressDilivery","selectedAdress","handleChange","stateMarquee","values","role","setFieldValue","setFieldCountry","setStateMarquee","setChooseAddress","searchAddressRenderData","decorOpenModalAddAddress","updateAddressRenderData","OrderingViews","ROLE","Object","keys","length","results","map","res","id","flat","city","phone","house","street","profile","country","last_name","post_code","first_name","middle_name","key","Pagination","allCount","count","searchCount","location","handlerChange","onClick","React","OrderingAddressContainer","setValues","dispatch","useStoreon","useState","data","q","page"],"mappings":"oNAMA,MAAMA,EAAkB,EACtBC,kBACAC,iBACAC,eACAC,eACAC,SACAC,OAEAC,gBACAC,kBACAC,kBAEAC,mBACAC,0BACAC,2BACAC,6BAKE,EAACC,EAAA,kBAAD,KACE,EAACA,EAAA,sBAAD,CACER,KAAMA,IAINA,IAASS,mBACP,EAACD,EAAA,8BAAD,CACEH,wBAAyBA,IAEvB,KAIRK,OAAOC,KAAKhB,GAAiBiB,OAC3BjB,EAAgBkB,QAAQC,IAAKC,IAC3B,MAAM,GACJC,EADI,KAEJC,EAFI,KAGJC,EAHI,MAIJC,EAJI,MAKJC,EALI,OAMJC,EANI,QAOJC,EAPI,QAQJC,EARI,UASJC,EATI,UAUJC,EAVI,WAWJC,EAXI,YAYJC,GACEZ,EAEJ,OACE,EAACP,EAAA,sBAAD,CACEoB,IAAKZ,EACLE,KAAMA,EACNK,QAASA,EACTG,WAAYA,EACZT,KAAMA,EACNG,MAAOA,EACPJ,GAAIA,EACJQ,UAAWA,EACXG,YAAaA,EACbR,MAAOA,EACPM,UAAWA,EACXH,QAASA,EACTD,OAAQA,EACRtB,OAAWA,EAEXH,eAAgBA,EAChBM,gBAAiBA,EACjBL,aAAcA,EACdM,gBAAiBA,EACjBL,aAAcA,EACdM,iBAAqBA,MAIxB,KAIHM,OAAOC,KAAKhB,GAAiBiB,OAC3B,EAACiB,EAAA,EAAD,CAAYC,SAAQ,OAAEnC,QAAF,IAAEA,OAAF,EAAEA,EAAiBoC,MAAOC,YAAW,OAAErC,QAAF,IAAEA,OAAF,EAAEA,EAAiBkB,QAAQD,OAAQmB,MAAO,GAAIE,SAAU,SAAUC,cAAe3B,IAC1I,KAMJG,OAAOC,KAAKhB,GAAiBiB,OAC1BZ,IAASS,qBAAmC,OAAfd,QAAe,IAAfA,OAAA,EAAAA,EAAiBkB,QAAQD,QAAS,EAC3D,KACA,EAACJ,EAAA,wBAAD,CAAqC2B,QAAS7B,IACjD,MAOV,EAAe8B,OAAW1C,G,sBCrG1B,MAAM2C,EAA2B,EAC/B1C,kBAAkB,GAClBI,SACAC,OAEAsC,gBAGA,MAAM,SAAEC,IAAaC,WACf,EAAE1C,EAAF,EAAgBK,IAAoBsC,eAAS,GAoCrD,OACI,EAAC,EAAD,CACErC,iBAxBqB,CAACY,EAAIO,KAC5Be,GAAU,kBACLvC,GADI,IAEP,eAAkBiB,KAOpBuB,EAAS,qBAJuB,CAC9BhB,QAASA,KAkBT5B,gBAAoBA,EACpBQ,gBAAoBA,EACpBL,aAAiBA,EACjBC,OAAWA,EACXC,KAASA,EAETK,wBAtC6BqC,IAI/BH,EAAS,gBAHU,CACjBI,EAAGD,KAqCHnC,wBAlB6BqC,IAI/BL,EAAS,cAHU,CACjBK,KAAMA,KAiBNtC,yBA7C6B,KAC/BiC,EAAS,uBAiDb,EAAeH,OAAWC","file":"static/js/60.2d79ce98.chunk.js","sourcesContent":["import React from 'react';\nimport OrderingViews from '../../../../Views/OrderingViews';\nimport { ROLE } from '../../../../const';\nimport Pagination from '../../../../Views/Pagination';\n\n\nconst OrderingAddress = ({\n  addressDilivery,\n  selectedAdress,\n  handleChange,\n  stateMarquee,\n  values,\n  role,\n  \n  setFieldValue,\n  setFieldCountry,\n  setStateMarquee,  \n  \n  setChooseAddress,\n  searchAddressRenderData,\n  decorOpenModalAddAddress,\n  updateAddressRenderData,\n\n}) => {\n\n  return (\n    <OrderingViews.OrderingAddress>\n      <OrderingViews.OrderingAddressHead \n        role={role}\n      />\n      {/* Поиск по ФИО только для дропа */}\n      {\n        role === ROLE.DROPSHIPPER ? (\n          <OrderingViews.OrderingAddressSearcheInput\n            searchAddressRenderData={searchAddressRenderData}\n          />\n          ) : null\n      }\n      \n      {        \n      Object.keys(addressDilivery).length?\n        addressDilivery.results.map((res) => {\n          const {\n            id,\n            flat,\n            city,\n            phone,\n            house,\n            street,\n            profile,\n            country,\n            last_name,\n            post_code,\n            first_name,\n            middle_name,\n          } = res;\n\n          return (\n            <OrderingViews.OrderingAddressItem\n              key={id}\n              city={city}\n              country={country}\n              first_name={first_name}\n              flat={flat}\n              house={house}\n              id={id}\n              last_name={last_name}\n              middle_name={middle_name}\n              phone={phone}\n              post_code={post_code}\n              profile={profile}\n              street={street}\n              values = { values }\n\n              selectedAdress={selectedAdress}\n              setFieldCountry={setFieldCountry}\n              handleChange={handleChange}\n              setStateMarquee={setStateMarquee}\n              stateMarquee={stateMarquee}\n              setChooseAddress = { setChooseAddress }\n            />\n          );\n        })\n        : (null)\n      }\n      \n      {\n        Object.keys(addressDilivery).length?\n          <Pagination allCount={addressDilivery?.count} searchCount={addressDilivery?.results.length} count={30} location={'center'} handlerChange={updateAddressRenderData} />\n        : null\n      }\n\n      {/* Для розницы и опта максимум 3 адреса. Если их меньше, то появляется кнопка добавить адрес \n          У дропа кнопка есть всегда */}\n    {\n      Object.keys(addressDilivery).length?\n        (role !== ROLE.DROPSHIPPER && addressDilivery?.results.length > 2)\n            ?null\n            :<OrderingViews.OrderingAddressAddBtn onClick={decorOpenModalAddAddress} />\n        : null\n    }\n\n    </OrderingViews.OrderingAddress>\n  );\n};\n\nexport default React.memo(OrderingAddress);\n//export default OrderingAddress;","import React, { useState, useEffect } from 'react';\nimport { useStoreon } from 'storeon/react';\nimport OrderingAddress from './OrderingAddress';\n\n\nconst OrderingAddressContainer = ({\n  addressDilivery = {},\n  values,\n  role,\n  \n  setValues,\n}) => {\n\n  const { dispatch } = useStoreon();\n  const [ stateMarquee, setStateMarquee ] = useState(true)\n\n  const decorOpenModalAddAddress = () => {\n    dispatch('modalAddAddress')\n\n  };\n\n  const searchAddressRenderData = (data) => {\n    let paramsSearch = {\n      q: data\n    }\n    dispatch('searchAddress', paramsSearch)\n  };\n\n  const setChooseAddress = (id, country) => {\n    setValues({\n      ...values,\n      'selectedAdress': id\n    })\n    \n    const paramsGetCountryAddress = {\n      country: country\n    }\n\n    dispatch('getCountryDeliviry', paramsGetCountryAddress);\n\n  }\n\n  const updateAddressRenderData = (page) => {\n    const paramsPage = {\n      page: page\n    }\n    dispatch('getAdresses', paramsPage)\n  }\n\n\nreturn (\n    <OrderingAddress\n      setChooseAddress = { setChooseAddress }\n      addressDilivery = { addressDilivery }\n      setStateMarquee = { setStateMarquee }\n      stateMarquee = { stateMarquee }\n      values = { values }\n      role = { role }\n\n      searchAddressRenderData = { searchAddressRenderData }\n      updateAddressRenderData = { updateAddressRenderData }\n      decorOpenModalAddAddress = { decorOpenModalAddAddress }\n    />\n  )\n};\n\nexport default React.memo(OrderingAddressContainer);\n"],"sourceRoot":""}