{"version":3,"sources":["webpack://client/./src/Pages/CatalogPage/CatalogPageLayout/CatalogFilters/TypeProductFilters.js"],"names":["TypeProductFilters","categories","values","setValues","openBtnSubmit","name","sercheValue","setSercheValue","useState","renderTypeProductCheckBox","setRenderTypeProductCheckBox","useEffect","recursParseCategory","data","listcategories","getListCategoryData","category","children","length","push","forEach","categoryChild","Array","isArray","console","log","results","sercheTypeProduct","e","value","target","newRenderTypeProductCheckBox","filter","el","title","toUpperCase","search","updateRenderProiduct","resetFilter","preventDefault","is_visibleViewAll","map","i","id","checked","includes","key","onChange","newValue","handlerChangeFilter","variant","label","data-cy","count","React"],"mappings":"+LAIA,MAAMA,EAAqB,EACzBC,aAAa,GACbC,SAAS,CAAED,WAAY,IACvBE,YAAY,SACZC,gBAAgB,aAEhB,MAAMC,EAAQ,cAER,EAACC,EAAD,EAAcC,IAAkBC,cAAS,KACzC,EAACC,EAAD,EAA4BC,IAAgCF,cAAS,KAuB3EG,eAAU,KACRD,EAA6BE,EAAoBX,KAChD,CAACA,IAEJ,MAAMW,EAAsB,CAACC,EAAO,MAClC,IAAIC,EAAiB,GACrB,MAAMC,EAAuBC,IAAa,MACxC,UAAIA,EAASC,gBAAb,OAAI,EAAmBC,QACrBJ,EAAeK,KAAKH,GACpBA,EAASC,SAASG,QAASC,IACzBN,EAAoBM,MAGtBP,EAAeK,KAAKH,IAWxB,OAPKM,MAAMC,QAAQV,KACjBW,QAAQC,IAAI,+BACZZ,EAAOA,EAAKa,SAEdb,EAAKO,QAASJ,IACZD,EAAoBC,KAEfF,GAmBT,OACE,EAAC,uBAAD,CACER,YAAaA,EACbqB,kBAxDuBC,IAXGA,KAC5B,MAAMC,EAAQD,EAAEE,OAAOD,MACvB,GAAc,KAAVA,EAEF,OADAtB,EAAesB,GACRnB,EAA6BT,GAEtC,MAAM8B,EAA+B9B,EAAW+B,OAAOC,IAA8D,IAAxDA,EAAGC,MAAMC,cAAcC,OAAOP,EAAMM,gBACjGzB,EAA6BqB,GAC7BxB,EAAesB,IAIfQ,CAAqBT,IAwDnBU,YArDiBV,IACnBA,EAAEW,iBACFpC,GAAU,kBAAKD,GAAN,IAAc,CAACG,GAAO,MAC/BE,EAAe,KAmDbiC,kBAAmB/B,EAA0BS,QAE5CT,EAA0BgC,IAAI,CAACR,EAAIS,KAAM,MACxC,MAAMC,EAAKV,EAAGU,GACRC,EAAU1C,EAAOD,WAAW4C,SAASF,GAE3C,OACE,EAAC,uBAAD,CAAiCG,IAAKH,GACpC,EAAC,IAAD,CACEC,QAASA,EACTvC,KAAMA,EACNyC,IAAKH,EACLI,SAAWnB,GAjCK,EAACA,EAAGe,KAC9B,MAAMd,EAAQD,EAAEgB,QAChB,GAAc,OAAVf,EAAJ,CACA,GAAIA,EAAO,CACJP,MAAMC,QAAQrB,EAAOD,cACxBC,EAAOD,WAAa,CAACC,EAAOD,aAE9B,MAAM+C,EAAW9C,EAAOD,WAAW+B,OAAQC,GAAOA,IAAOU,GACzDxC,GAAU,kBAAKD,GAAN,IAAc,CAACG,GAAO2C,UAE/B7C,GAAU,kBAAKD,GAAN,IAAc,CAACG,GAAO,IAAIH,EAAOD,WAAY0C,MAExDvC,MAqB2B6C,CAAoBrB,EAAGe,GACxCO,QAAQ,QACRC,MAAOlB,EAAGC,MACVkB,UAAU,sBAAqBnB,EAAGU,KAEpC,EAAC,uBAAD,eAAkCV,EAAGoB,aAArC,QAA8C,QAQ1D,EAAeC,OAAWtD","file":"static/js/720.53b8b77c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CheckBox from '../../../../Views/CheckBox';\nimport CatalogViews from '../../../../Views/CatalogViews';\n\nconst TypeProductFilters = ({\n  categories = [],\n  values = { categories: [] },\n  setValues = () => { },\n  openBtnSubmit = () => { },\n}) => {\n  const name = `categories`;\n\n  const [sercheValue, setSercheValue] = useState('');\n  const [renderTypeProductCheckBox, setRenderTypeProductCheckBox] = useState([]);\n\n  const updateRenderProiduct = (e) => {\n    const value = e.target.value;\n    if (value === '') {\n      setSercheValue(value);\n      return setRenderTypeProductCheckBox(categories);\n    };\n    const newRenderTypeProductCheckBox = categories.filter(el => el.title.toUpperCase().search(value.toUpperCase()) !== -1);\n    setRenderTypeProductCheckBox(newRenderTypeProductCheckBox);\n    setSercheValue(value);\n  };\n\n  const sercheTypeProduct = (e) => {\n    updateRenderProiduct(e);\n  };\n\n  const resetFilter = (e) => {\n    e.preventDefault();\n    setValues({ ...values, [name]: [] });\n    setSercheValue('');\n  };\n\n  useEffect(() => {\n    setRenderTypeProductCheckBox(recursParseCategory(categories));\n  }, [categories]);\n\n  const recursParseCategory = (data = []) => {\n    let listcategories = [];\n    const getListCategoryData = (category) => {\n      if (category.children?.length) {\n        listcategories.push(category);\n        category.children.forEach((categoryChild) => {\n          getListCategoryData(categoryChild);\n        });\n      } else {\n        listcategories.push(category);\n      }\n    };\n\n    if (!Array.isArray(data)) {\n      console.log('IF NO ARRAY DATA CATEGORORY')\n      data = data.results;\n    }\n    data.forEach((category) => {\n      getListCategoryData(category);\n    });\n    return listcategories;\n  };\n\n  const handlerChangeFilter = (e, id) => {\n    const value = e.checked;\n    if (value === null) return;\n    if (value) {\n      if (!Array.isArray(values.categories)) {\n        values.categories = [values.categories];\n      }\n      const newValue = values.categories.filter((el) => el !== id);\n      setValues({ ...values, [name]: newValue });\n    } else {\n      setValues({ ...values, [name]: [...values.categories, id] });\n    }\n    openBtnSubmit();\n  }\n\n\n  return (\n    <CatalogViews.TypeProductFilters\n      sercheValue={sercheValue}\n      sercheTypeProduct={sercheTypeProduct}\n      resetFilter={resetFilter}\n      is_visibleViewAll={renderTypeProductCheckBox.length}\n    >\n      {renderTypeProductCheckBox.map((el, i) => {\n        const id = el.id;\n        const checked = values.categories.includes(id);\n\n        return (\n          <CatalogViews.LayoutCheckBoxItem key={id}>\n            <CheckBox\n              checked={checked}\n              name={name}\n              key={id}\n              onChange={(e) => handlerChangeFilter(e, id)}\n              variant=\"light\"\n              label={el.title}\n              data-cy={`categoriesCheckBox-${el.id}`}\n            ></CheckBox>\n            <CatalogViews.CountItemsCheckBox>{el.count ?? 0}</CatalogViews.CountItemsCheckBox>\n          </CatalogViews.LayoutCheckBoxItem>\n        );\n      })}\n    </CatalogViews.TypeProductFilters>\n  );\n};\n\nexport default React.memo(TypeProductFilters);\n"],"sourceRoot":""}