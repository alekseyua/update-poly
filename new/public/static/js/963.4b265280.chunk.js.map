{"version":3,"sources":["webpack://client/./src/Views/PreviewProduct/PreviewProductCardModal/PreviewProductCardModal.js","webpack://client/./src/Views/PreviewProduct/PreviewProductCardModal/PreviewProductCardModalContainer.js"],"names":["AsyncLabels","AsyncComponent","AsyncPricesContainer","AsyncColorsButton","AsyncSizesButton","AsyncBuyoutCondition","AsyncInfoOpenCollection","AsyncControlButtons","AsyncPreviewSlider","AsyncSectionRaitingAndSharingAndMyWish","media","defaultProductCard","productId","brand","title","is_new","is_bestseller","is_in_stock","is_closeout","in_cart_count","in_stock_count","recommended_price","prices","colors","sizes","currency","role","product_rc","product_rcAmount","handleChooseProduct","is_collection","collections","status","url","modalView","is_liked","handlerOpenListCollection","addLikeProductCard","removeLikeProductCard","className","style","defaultImage","imageOrVideoSet","value","label","Text","text","max","ROLE","ProductDetailsViews","name","Title","variant","type","SceletonBlock","profileId","adding_type","breadcrumbs","reviews_statistic","reviewsCount","review","role_configuration","site_configuration","article","product_sku","dispatch","useStoreon","color","size","id","console","log","a","location","pathname"],"mappings":"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","file":"static/js/963.4b265280.chunk.js","sourcesContent":["import AsyncComponent from \"../../../helpers/asyncComponent\";\nimport ProductDetailsViews from '../../ProductDetailsViews';\nimport BlockGrid from '../../GridContainerBlock';\nimport Text from '../../../helpers/Text';\nimport { ROLE } from \"../../../const\";\nimport Raiting from '../../Raiting';\nimport Title from '../../Title';\nimport React from \"react\";\n\nconst AsyncLabels = AsyncComponent(() => {\n    return import('../../ProductDetailsViews/Labels/Labels');\n});\nconst AsyncPricesContainer = AsyncComponent(() => {\n    return import('../../ProductDetailsViews/PricesContainer/PricesContainer');\n});\nconst AsyncColorsButton = AsyncComponent(() => {\n    return import('../../ProductDetailsViews/ColorsItems/ColorsItems');\n});\nconst AsyncSizesButton = AsyncComponent(() => {\n    return import('../../ProductDetailsViews/SizesItems/SizesItems');\n});\nconst AsyncBuyoutCondition = AsyncComponent(() => {\n    return import('../../ProductDetailsViews/BuyoutCondition/BuyoutCondition');\n});\nconst AsyncInfoOpenCollection = AsyncComponent(() => {\n    return import('../../ProductDetailsViews/InfoOpenCollection/InfoOpenCollection');\n});\nconst AsyncControlButtons = AsyncComponent(() => {\n    return import('../../ProductDetailsViews/ControlButtons/ControlButtonsContainer.js');\n});\n\nconst AsyncPreviewSlider = AsyncComponent(()=>{\n    return import ('../PreviewSlider/PreviewSliderContainer');\n})\n\nconst AsyncSectionRaitingAndSharingAndMyWish = AsyncComponent(()=> import('../../../Views/ProductDetailsViews/SectionRaitingAndSharingAndMyWish/SectionRaitingAndSharingAndMyWish'))\n\n\nimport style from './styles/previewproduct.module.scss';\nimport SceletonBlock from \"../../SceletonBlock\";\n\nconst PreviewProductCardModal = ({\n    media,\n    defaultProductCard,\n    productId,\n    brand,\n    title,\n    is_new,\n    is_bestseller,\n    is_in_stock,\n    is_closeout,\n    in_cart_count,\n    in_stock_count,\n    recommended_price,\n    prices,\n    colors,\n    sizes,\n    currency,\n    role,\n    product_rc,\n    product_rcAmount,\n    handleChooseProduct,\n    is_collection,\n    collections,\n    status,\n    url,\n    modalView = true,\n    is_liked,\n    \n    handlerOpenListCollection,\n    addLikeProductCard,\n    removeLikeProductCard,\n}) => {\n\n    return (\n        <BlockGrid.Container>\n            <div\n                className={style['preview-product-modal__body--modal']}\n            >\n                <div\n                    className={style['preview-product-modal__left']}\n                >\n                    <AsyncPreviewSlider\n                        defaultImage={defaultProductCard}\n                        imageOrVideoSet = {media}\n                    />\n                </div>\n                <div\n                    className={style['preview-product-modal__right']}\n                >\n                    <BlockGrid.Row // ? 1 информационный ряд Raiting\n                        className={style['preview-product-modal__row']}\n                    >\n                        {/* // ?! ДАННЫЕ НЕ ПРИХОДЯТ, ЖДЁМ ОТ БЭКА Raiting \n                            */}\n                            \n                            <AsyncSectionRaitingAndSharingAndMyWish\n                                 is_liked = { is_liked }\n                                 title = { title }\n                                 value = { 0 }\n                                 label = { Text({ text: 'reviews-es' }) }\n                                 max = { 5 }\n                                 \n                                 addLikeProductCard = { addLikeProductCard }\n                                 removeLikeProductCard = { removeLikeProductCard }\n                            />\n\n                    </BlockGrid.Row>\n                    <BlockGrid.Row // ? 2 информационный ряд Brand\n                        className={style['preview-product-modal__row']}\n                    >\n                        {\n                            !!brand && (role !== ROLE.RETAIL && role !== ROLE.UNREGISTRED) ?\n                                <ProductDetailsViews.BrandName name = { brand } />\n                                : null\n                        }\n                    </BlockGrid.Row>\n                    <BlockGrid.Row // ? 3 информационный ряд Title\n                        className={style['preview-product-modal__row']}\n                    >\n\n                        {\n                            !!title && title !== 'title' ? (\n                                <Title variant={'prodpage__title'} type={'h1'}>\n                                    {title}\n                                </Title>\n                            ) : (\n                                <SceletonBlock />\n                            )\n                        }\n                    </BlockGrid.Row>\n                    <BlockGrid.Row  // ? 4 информационный ряд is_now, is_besceler, is_istock ...\n                        className={style['preview-product-modal__row']}\n                    >\n                        <AsyncLabels\n                            is_bestseller = { is_bestseller }\n                            is_closeout = { is_closeout }\n                            is_in_stock = { is_in_stock }\n                            is_new = { is_new }\n                        />\n                    </BlockGrid.Row>\n                    <BlockGrid.Row  // ? 5 информационный ряд стоимость товара\n                        className={style['preview-product-modal__row']}\n                    >\n                        <AsyncPricesContainer\n                            recommended_price = { recommended_price }\n                            in_cart_count = { in_cart_count }\n                            currency = { currency }\n                            prices = { prices }\n                            role = { role }\n                        />\n                    </BlockGrid.Row>\n                    <BlockGrid.Row  // ? 6 информационный ряд цветовая разкраска товара\n                        className={style['preview-product-modal__row']}\n                    >\n                        <AsyncColorsButton\n                            handleChooseProduct = { handleChooseProduct }\n                            productId = { productId }\n                            colors = { colors }\n                            sizes = { sizes }\n                        />\n                    </BlockGrid.Row>\n                    {\n                        role === ROLE.WHOLESALE || (role === ROLE.DROPSHIPPER && is_collection) ?\n                            <BlockGrid.Row  // ? 7 информационный ряд c условиями выкупа\n                                className={style['preview-product-modal__row']}\n                            >\n                                <AsyncBuyoutCondition\n                                    role={role}\n                                    prices={prices}\n                                    currency={currency}\n                                    product_rc={product_rc}\n                                    is_collection={is_collection}\n                                    product_rcAmount={product_rcAmount}\n                                />\n                            </BlockGrid.Row>\n                            : null\n                    }\n                    <BlockGrid.Row  // ? 8 информационный ряд c размерами товара\n                        className={style['preview-product-modal__row']}\n                    >\n                        <AsyncSizesButton\n                            handleChooseProduct={handleChooseProduct}\n                            in_stock_count={in_stock_count}\n                            productId={productId}\n                            colors={colors}\n                            sizes={sizes}\n                        />\n                    </BlockGrid.Row>\n                    {\n                        role === ROLE.DROPSHIPPER ?\n                            <BlockGrid.Row  // ? 9 информационный ряд кнопка для сборов только для дроперов\n                                className={style['preview-product-modal__row']}\n                            >\n                                <AsyncInfoOpenCollection\n                                    collections={collections}\n                                    status={status}\n                                    handlerOpenListCollection={handlerOpenListCollection}\n                                    title={title}\n                                />\n                            </BlockGrid.Row>\n                            : null\n                    }\n                    <BlockGrid.Row  // ? 10 информационный ряд c кнопками добавления и перехода к товару\n                        className={style['preview-product-modal__row']}\n                    >\n                        <AsyncControlButtons\n                            in_stock_count = { in_stock_count }\n                            in_cart_count = { in_cart_count }\n                            is_collection = { is_collection }\n                            is_in_stock = { is_in_stock }\n                            modalView = { modalView }\n                            productId = { productId }\n                            role = { role }\n                            url = { url }\n                        />\n                    </BlockGrid.Row>\n\n\n                </div>\n            </div>\n        </BlockGrid.Container>\n    )\n}\n\nexport default PreviewProductCardModal;","import React from \"react\";\nimport PreviewProductCardModal from \"./PreviewProductCardModal\";\nimport { defaultProductCard } from '../../../images';\nimport { useStoreon } from 'storeon/react';\n\nconst PreviewProductCardModalContainer = ({\n    url,\n    productId,\n    profileId,\n    adding_type,\n    breadcrumbs,\n    reviews_statistic,\n    reviewsCount,\n    title,\n    brand,\n    prices,\n    recommended_price,\n    colors,\n    sizes,\n    review,\n    in_stock_count,\n    is_new,\n    is_bestseller,\n    is_in_stock,\n    is_closeout,\n    role_configuration,\n    is_liked,\n    media,\n    in_cart_count,\n    site_configuration,\n    is_collection,\n    product_rc,\n    article,\n    product_rcAmount,\n    product_sku,\n    role,\n    collections,\n    currency,\n    status,\n}) => {\n    const { dispatch } = useStoreon();\n\n    const handleChooseProduct = (productId, color, size) => {\n        /**\n         * @param {\n         *  productId - номер товара,\n         *  color - приходит или массив цветов из которого нам необходимо вытянуть активный id или id цветовая\n         *  size - приходит или массив размеров из которого нам необходимо вытянуть активный id или id размерами         * \n         * } \n         * @return\n         */\n\n        dispatch('quickViewProduct', {\n            id: productId,\n            color: color,\n            size: size,\n        })\n    }\n    \n    const handlerOpenListCollection = (collections, title) => {\n       return dispatch('openInfoCollection',{\n            collections: collections,\n            title: title\n        })\n    }\n\n    const addLikeProductCard = (id) => {\n        console.log('addWishList = ', id,\n        {a: location.pathname}\n        )\n        dispatch('addWishList', { id: id, pathname: location.pathname})\n    }\n\n    const removeLikeProductCard = (id) => {\n        console.log('removeWishList = ', id)\n        dispatch('removeWishList', { id: id, pathname: location.pathname })\n    }\n\n    return (\n        <PreviewProductCardModal\n            defaultProductCard={defaultProductCard}\n            recommended_price={recommended_price}\n            product_rcAmount={product_rcAmount}\n            in_stock_count={in_stock_count}\n            in_cart_count={in_cart_count}\n            is_bestseller={is_bestseller}\n            is_closeout={is_closeout}\n            is_in_stock={is_in_stock}\n            productId = { productId }\n            currency={currency}\n            product_rc={product_rc}\n            is_liked = { is_liked }\n            is_new={is_new}\n            prices={prices}\n            colors={colors}\n            sizes={sizes}\n            media={media}\n            brand={brand}\n            title={title}\n            role={role}\n            status={status}\n            collections={collections}\n            is_collection={is_collection}\n            url = { url }\n\n            handlerOpenListCollection={handlerOpenListCollection}\n            handleChooseProduct={handleChooseProduct}\n            addLikeProductCard = { addLikeProductCard }\n            removeLikeProductCard = { removeLikeProductCard }\n        />\n    )\n}\n\nexport default PreviewProductCardModalContainer;"],"sourceRoot":""}